clear;clc
%addpath('codes','dataset');
%addpath('I:\Soft_computing code\ELM\ELM_updated1\html');
%addpath('I:\');
%% Load data
load Dataset
Xdata=Antenna_microstrip(:,1:4); % training and testing input data
Ydata=Antenna_microstrip(:,5);   % training and testing output/target data
%
%
%% define Options
%In the dats sets, Instances will be in the rows and attributes/variables will be in the columns
 %Y is actual training output data,Y_hat is the training targets/output/predicted data generated by ELM
 %Yts is actual testing output data,Yts_hat is the test targets/output/predicted data generated by ELM
 %These are available in net in workspace

Opts.fixed=0;  % 1 for fixed training and testing input and output data, 0 for random training and testing data

number_neurons=200;   % Maximam number of neurons
Opts.Tr_ratio=0.80;       % training ratio for fixing training and testing data randomly

Opts.ActivationFunction='tribas';% Activation functions to be used one of them: 'sig','tansig','logsig',elliotsig',radbas','tribas','sin','cos','hardlim'

Opts.Regularisation=1; % 1 for inverting with regularisation; 0 for other e.g.Moore-Penrose pseudoinverse of matrix
%C=1/(50*eps);% C value required in the calculation of inversion of matrix in regularization
C=10^13;
seed=5201;% seed for random number
%% Training and testing
[net]= elm_standard(Xdata,Ydata,Opts,number_neurons,C,seed);
net
%i=0;
% for number_neurons=50:200
%     i=i+1;
% [net]= elm_standard(Xdata,Ydata,Opts,number_neurons,C,seed);
% % net.training_accuracy=TrAccuracy;
% % net.testing_accuracy=TsAccuracy;
% training_accuracy(i)=net.training_accuracy;
% testing_accuracy(i)=net.testing_accuracy;
% end
% plot(50:200,training_accuracy)
%net